import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

# 1. بارگیری مجموعه داده MNIST
mnist = keras.datasets.mnist  # مجموعه داده اعداد دست‌نویس
(x_train, y_train), (x_test, y_test) = mnist.load_data()  # تقسیم به داده‌های آموزشی و تستی

# 2. نرمال‌سازی داده‌ها (مقادیر پیکسل را به بازه 0 تا 1 می‌بریم)
x_train, x_test = x_train / 255.0, x_test / 255.0

# 3. تعریف مدل شبکه عصبی کانولوشنی (CNN)
model = keras.Sequential([
    keras.layers.Reshape((28, 28, 1), input_shape=(28, 28)),  # اضافه کردن بعد کانال رنگی
    keras.layers.Conv2D(32, (3, 3), activation='relu'),  # لایه کانولوشنی اول
    keras.layers.MaxPooling2D((2, 2)),  # کاهش ابعاد با مکثولینگ
    keras.layers.Conv2D(64, (3, 3), activation='relu'),  # لایه کانولوشنی دوم
    keras.layers.MaxPooling2D((2, 2)),  # مکثولینگ مجدد
    keras.layers.Flatten(),  # صاف کردن خروجی برای لایه متصل به هم
    keras.layers.Dense(128, activation='relu'),  # لایه کاملاً متصل با 128 نورون
    keras.layers.Dense(10, activation='softmax')  # لایه خروجی با 10 نورون (اعداد 0 تا 9)
])

# 4. کامپایل کردن مدل
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# 5. آموزش مدل
model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))

# 6. ارزیابی مدل بر روی داده‌های تستی
test_loss, test_acc = model.evaluate(x_test, y_test)
print(f"دقت مدل روی داده‌های تستی: {test_acc:.4f}")

# 7. نمایش چند تصویر از مجموعه داده و پیش‌بینی مدل
def plot_predictions():
    plt.figure(figsize=(10, 5))
    for i in range(10):
        plt.subplot(2, 5, i + 1)
        plt.xticks([])
        plt.yticks([])
        plt.grid(False)
        plt.imshow(x_test[i], cmap=plt.cm.binary)
        prediction = np.argmax(model.predict(np.expand_dims(x_test[i], axis=0)))
        plt.xlabel(f"پیش‌بینی: {prediction}")
    plt.show()

plot_predictions()
